{"version":3,"file":"todo-dispatcher.js","sourceRoot":"","sources":["../src/todo-dispatcher.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAGvD,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,UAAU;IAI5B,MAAM;QACb,OAAO,IAAI,CAAA;;;qBAGM,IAAI,CAAC,YAAY;KACjC,CAAC;IACJ,CAAC;IACO,YAAY;QAClB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;QAC9B,IAAI,IAAI,EAAE;YACR,MAAM,OAAO,GAAG;gBACd,MAAM,EAAE,EAAC,IAAI,EAAC;gBACd,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;aACf,CAAC;YACF,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;SACvB;IACH,CAAC;CACF,CAAA;AArBC;IADC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;6CACI;AAFrB,cAAc;IADnB,aAAa,CAAC,iBAAiB,CAAC;GAC3B,cAAc,CAuBnB","sourcesContent":["import {LitElement, html} from 'lit';\nimport {customElement, query} from 'lit/decorators.js';\n\n@customElement('todo-dispatcher')\nclass TodoDispatcher extends LitElement {\n  @query('input', true)\n  input!: HTMLInputElement;\n\n  override render() {\n    return html`\n    <p>TODO List (with Events)</p>\n    <input id=\"input\"></input>\n    <button @click=${this.dispatchTodo}>Add Item</button>\n    `;\n  }\n  private dispatchTodo() {\n    const name = this.input.value;\n    if (name) {\n      const options = {\n        detail: {name},\n        bubbles: true,\n        composed: true,\n      };\n      this.dispatchEvent(new CustomEvent('mytodo', options));\n      this.input.value = '';\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'todo-dispatcher': TodoDispatcher;\n  }\n}\n"]}